package task;

public class Task_01 {
//	1. 동물 클래스를 작성하세요
//	 필드(속성) : '이름', '나이', '종류'라는 필드
//	    - 이름 : 동물의 이름을 저장하는 곳
//	    - 나이 : 동물의 나이를 저장하는 곳
//	    - 종류 : 동물의 종류(개, 고양이, 새 등)를 저장하는 곳
//	 메서드(행동)
//	    - 밥먹기() : 동물이 밥을 먹는 행동을 하는 메서드
//	    - 놀기() : 동물이 노는 행동을 하는 메서드
//	    - 자다() : 동물이 자는 행동을 하는 메서드
//	    - 생일축하() : 동물의 생일을 축하하는 메서드
	
	// 클래스 생성
	// 필드 생성 String name, int age, String Type
	String name;  // 이름을 저장할 수 있는 필드
	int age;  // 나이를 저장할 수 있는 필드
	String Type;  // 종류를 저장할 수 있는 필드
	
	// 메소드 생성
	// 밥먹기
	// 리턴값 x 매개변수x 식사중 식사완료 출력
	void eat() {  // 식사 메소드
		System.out.println(this.name + "이/가 식사를 합니다");  // 이름과 행동 출력
		System.out.println("식사 완료.");  // 식사끝
	}
	
	// 놀기
	// 리턴값x 매개변수x 놀기 놀기 완료 출력
	void play() {  // 놀기 메소드
		System.out.println(this.name + "이/가 재밋게 놀기 시작합니다.");  // 이름과 놀고있음을 알려줌
		System.out.println("놀기끝.");  // 놀기끝
	}
	
	// 자다
	// 리턴값x 매개변수x 자는중 이러남 출력
	void sleep() {  // 잠자기 메소드
		System.out.println(this.name + "이/가 잠에 들었습니다.");  // 이름과 잠을 자고 있다는 것을 알려줌
		System.out.println("기상.");  // 기상
	}
	
	// 생일축하
	// 리턴값x 매개변수x 생일축하 생일끝 출력
	void birthday() {  // 생일 메소드
		System.out.println(this.name + "(이)의 생일.");  // 누가 생일인지 알려줌
		System.out.println("생일끝.");  // 생일끝
	}
}

==========================================================================================================
package task;

public class Task_02 {
//	2. BasicTv 클래스를 작성하세요
//	필드 :
//	boolean power : TV 전원 상태 (기본값: false)
//	int channel : TV 채널 (기본값: 1)
//	String color : TV의 색상
//	int size : TV의 크기
//	int price : TV의 가격
//
//	메서드:
//	void powerOnOff() : TV 전원을 켜거나 끄는 메서드
//	      전원이 켜져 있으면 끄고, 꺼져 있으면 켜야 다른 동작이 가능하다
//	void channelUp() : 채널을 1씩 증가시키는 메서드
//	      채널 최대값 999
//	void channelDown() : 채널을 1씩 감소시키는 메서드
//	      채널 최소값 1
	
	// 필드 생성
	// 논리형 power;
	// 정수형 channel  = 1;
	// 문자열 color;
	// 정수형 size;
	// 정수형 price;
	boolean power;  // 전원의 상태 기본값 : false
	int channel = 990;  // 체널 번호 1로 초기화
	String color;  // Tv의 색상 기본값 null
	String size;  // Tv의 크기 기본값 0
	int price;  // Tv의 가격 기본값 0
	
	// 메소드
	// 전원 켜기 메소드
	// 논리형으로 !연산자 사용
	// 전원버튼 누른 후 현제 전원 상태 출력
	void powerOnOff() {  // 전원버튼이 눌렸다
		power = !power;  // 꺼져있으면 켜고 켜져있으면 끄기
		System.out.println(power ? "TV 전원이 켜졌습니다." : "TV 전원이 꺼졌습니다.");
		// 현제 전원의 상태를 알려주기 true면 켜짐 false면 꺼짐
	}
	
	// 체널 올리기 메소드
	// 전원이 true인지 확인
	// false라면 전원 켜야 한다고 알려주기
	// 체널의 현제 값을 판단하고 999 미만이라면 올려주기
	// 올려진 체널 출력
	void channelUp() {  // 체널 올리기
		if(power) {  // 전원의 상태 확인 켜져있다면
			if(channel < 999) {  // 체널이 최고번호인 999 아래라면
				channel++;  // 체널 올려주기
				System.out.println("현제 체널 : [" + channel + "]");  // 현제 체널 알려주기
			} else {  // 체널이 999가 되었다
				System.out.println("더이상 체널을 올릴 수 없습니다.");  // 더이상 체널을 올릴 수 없음
			}
		} else {  // 전원이 내려가있음
			System.out.println("TV 전원을 먼저 켜주세요.");  // 전원의 상태 알려주기
		}
	}
	
	// 체널 내리기 메소드
	// false라면 전원 켜야 한다고 알려주기
	// 체널의 현제 값을 판단하고 1이상이라면 내려주기
	// 내려진 체널 출력
	void channelDown() {  // 체널 내리기
		if(power) {  // 전원의 상태 확인 켜져있다면
			if(channel > 1) {  // 체널이 1보다 내려갈 수 없음 체널이 1보다 크다면
				channel--;  // 체널 1 내려주기
				System.out.println("현제 체널 : [" + channel + "]");  // 현제 체널 알려주기
			} else {  // 체널이 최소값인 1이라면
				System.out.println("더이상 체널을 내릴 수 없습니다.");  // 더이상 내릴 수 없다고 알려주기
			}
		} else {  // 전원이 내려가 있다면
			System.out.println("TV 전원을 먼저 켜주세요.");  // 현제 전원의 상태 알려주기
		}
	}
}

================================================================================================================
package task;

import java.util.Scanner;

public class Task_03 {
//	3. BasicTv 클래스와 함께 동작하는 TvController 프로그램을 작성하세요
//	   프로그램은 사용자로부터 명령을 입력받아 TV를 제어한다
//
//	   BasicTv 객체를 생성하고, 초기값으로 색상 "Black", 크기 32인치, 가격 500000원을 설정
//	   프로그램은 무한 반복(while)하며 사용자에게 다음 메뉴를 출력한다
//
//	=== TV 컨트롤 메뉴 ===
//	1. 전원 On/Off
//	2. 채널 올리기
//	3. 채널 내리기
//	4. 종료
//	메뉴 번호 입력 : 
//
//	사용자가 메뉴 번호를 입력하면, 입력된 번호에 따라 다음 동작을 수행한다
//	1 : powerOnOff() 메서드 호출
//	   전원이 켜지면 "TV 전원이 켜졌습니다." 출력, 꺼지면 "TV 전원이 꺼졌습니다." 출력
//	2 : TV 전원이 켜져 있으면 channelUp() 메서드 호출하고, "현재 채널: [채널 번호]"를 출력
//	   꺼져 있으면 "TV 전원을 먼저 켜주세요." 메시지 출력
//	3 : TV 전원이 켜져 있으면 channelDown() 메서드를 호출하고, "현재 채널: [채널 번호]"를 출력합니다. 꺼져 있으면 "TV 전원을 먼저 켜주세요." 메시지 출력
//	그 외 : 프로그램을 종료하고 "프로그램을 종료합니다." 메시지 출력
	public static void main(String[] args) {
		// 객체 생성
		// 입력메소드 import
		// 입력값을 받을 변수 선언
		// 색생과 크기 가격을 초기화
		// 프로그램을 제어할 boolean 변수 선언
		// 메뉴 보여주고 입력값 요구
		// 입력값 저장
		// while 반복문 실행
		// swith 사용
		// 사용자가 번호를 입력하면 해당 케이스 안의 코드 실행
		// 1, 2, 3번을 입력하면 코드 실행하고 초기 매뉴 다시 보여주기
		// 4를 입력하면 프로그램 종료
		// 그 외의 것들을 알려주면 잘못됨 알려주고 다시 메뉴 보여주기

		Task_02 control = new Task_02();  // 객체 선언
		Scanner sc = new Scanner(System.in);  // 입력 메소드 import

		control.color = "Black";  // 색상 초기화
		control.size = "32인치";  // 크기 초기화
		control.price = 500000;  // 가격 초기화

		int menuNum = 0;  // 메뉴 번호 입력받을 변수 선언 및 초기화
		boolean power = true;  // while문 제어할 변수 선언

		String msg = "=== TV 컨트롤 메뉴 ===\n1. 전원 On/Off\n2. 체널 올리기\n3. 체널 내리기\n4. 종료\n메뉴 번호 입력 : ";  // 메뉴로 띄울 메시지 저장
		System.out.print(msg);  // 최초 매뉴 띄우기

		menuNum = sc.nextInt();  // 메뉴 입력받아 저장

		while (power) {  // 프로그램 시작
			if (menuNum == 1 || menuNum == 2 || menuNum == 3 || menuNum == 4) {  // 메뉴에 있는 입력번호라면
				switch (menuNum) {  // 입력받은 숫자 판단
				case 1:  // 1번 선택
					control.powerOnOff();  // 전원버튼 켜져있다면 끄고 꺼져있다면 킨다 그 후 상태를 알려준다
					System.out.println();  // 줄 하나 띄우기
					System.out.print(msg);  // 메뉴 출력
					menuNum = sc.nextInt();  // 입력을 다시 받는다
					break;  // switch문 탈출
				case 2:  // 2번 선책
					control.channelUp();
					// 채널을 올려주는 메소드 채널을 올리고 바뀐 체널의 번호를 알려준다 더이상 올라갈 수 없으면 올릴 수 없다고 알려준다
					System.out.println();  // 줄 하나 띄우기
					System.out.print(msg);  // 메뉴 출력
					menuNum = sc.nextInt();  // 입력 받기
					break;  // switch문 탈출
				case 3:
					control.channelDown();
					// 체널을 내려주는 메소드 체널을 내리고 바뀐 체널의 번호를 알려준다 더 이상 내려갈 수 없으면 내려갈 수 없다고 알려준다
					System.out.println();  // 줄 하나 띄우기
					System.out.print(msg);  // 매뉴 출력
					menuNum = sc.nextInt();  // 입력 받기
					break;  // switch문 탈출
				case 4:  // 4번 선택
					System.out.println("프로그램을 종료합니다.");  // 종료 메시지 출력
					power = false;  // while문 탈출
				}
			} else {  // 메뉴에 없는 번호를 입력받음
				System.out.println("프로그램을 종료합니다.");  // 종료메시지 출력
				power = false;  // while문 탈출
			}

		}
	}
}

================================================================================================================================================

1. 생성자
	생성자란 모든 클래스가 기본적으로 가지고 있다.
	생성자는 클래스 이름과 동일해야 한다(오버로딩 가능)
	생성자를 통해 다른 클래스에 있는 메소드를 이용할 수 있게 해주는 객체를 생성할 수 있다.

	클래스를 이용하여 객체를 선언하는 방법
	클래스명 객체명 = new 클래스명();
	객체는 참조값을 가지고 있으며
	같은 생성자로 여러 객체를 선언할 수 있다
	new 키워드로 선언된 여러 겍체들은 각자 다른 참조값을 가진다

	생성자를 선언함으로써 해당 클래스에 있는 필드를 초기화 할 수 있다.
	클래스에는 기본 생성자가 있으며
	개발자가 따로 만들지 않을 때 JDK에 있는 컴파일러가 기본적으로 만들어준다

	클래스명(){  // 컴파일러가 만들어준 기본생성자

	}

	개발자가 임의로 생성자를 만들 수 있으며 매개변수와 실행할 문장을 넣어서 만들 수 있다.

	클래스명(매개변수){
		실행할문장;
	}

	매개변수와 실행할 문장은 자유롭게 생략 가능하다
	매개변수는 메소드를 정의할 때와 같이 '자료형 변수명' 의 형태로 선언되며 여러 개를 넣을 수 있다
	때문에 메소드와 같이 오버로딩이 가능하다
	반복되는 코드들 줄이기 가능, 인수의 타입과 갯수가 여러가지일 경우에 유용하다

	겍체명.필드명 = 변수;
	를 이용하여 메인 메소드 내에서 클래스 내에 선언된 필드의 값을 초기화 하는 것도 가능하다

	객체명.메소드명();
	클래스 내에서 만들어진 메소드를 호출하여 실행시킬 수 있다.
	()안에는 인수가 들어갈 수 있으며 리턴 타입이 없는 경우에는
	값으로 받아 저장하거나 출력메소드를 이용하여 출력이 가능하다

2. this, this()
	this는 객체 자기 자신이다.
	
	메인메소드에서 인수를이용하여 필드를 초기화 할 때
	this를 사용하면 생성자 내에서 해당 겍체의 필드만 초기화 하는 것이 가능하다
	필드명(매개변수){
		this.필드명1 = 값1;
		this.필드명2 = 값1;
	}

	객체가 2개 이상일 때 사용하거나
	필드명과 매개변수의 이름이 같을 때 사용한다
	필드명과 매개변수의 이름이 같으면 생성자 내에서 매개변수에 매개변수를 넣는것과 같다
	{}안에 있는 지역변수이기 때문

	하지만 코드가 추가, 수정되거나 가독성을 위해
	가급적 겍체를 가르키는 변수명에는 this를 무조건 붙이는 것이 좋다.

	this()는 자기 자신을 가르기는 생성자이다
	생성자 내부에서 만들어지며 맨 윗줄에서 만들어진다
	생성자가 여러개가 만들어지면 반복되는 코드가 생기는데
	this()를 사용하면 반복되는 코드를 줄일 수 있다

	클래스명(String name){
		this(name, 12);
	}
	와 같이 사용되면

	미리 만들어진 생성자
	클래스명(String name, int num){
		this.name = name;  // 메인메소드에서 받은 name
		this.age = num;  // 12
	}
	에서 다음과 같이 사용할 수 있다.
	메인메소드에서 인수로 문자열 하나만 받았지만 나이를 고정적으로 쉽게 초기화가 가능하다