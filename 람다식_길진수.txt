package lambda2;

public class FunctionMain {
	public static void main(String[] args) {
		FunctionalInter3 fi3 = new FunctionalInter3() {  // 익명 클래스로 추상 메소드 구현

			@Override  // 인터페이스의 메소드 오버라이드
			public int getMul(int num1, int num2) {  // 추상 메소드와 선언부 일치
				return num1 * num2;  // 두 정수를 곱한 값을 반환
			}
			
		};
		System.out.println("FunctionalInter3 익명클래스 : " + fi3.getMul(3, 3));  // 익명 클래스에서 구현된 메소드 호출
		
		FunctionalInter3 fi31 = (num1, num2) -> num1 * num2;  // 익명 메소드 람다식으로 객체 선언
		System.out.println("FunctionalInter3 익명메소드 : " + fi31.getMul(3, 8));  // 람다식으로 구현한 메소드 호출
	}
}
--------------------------------------------------------------------------------------------------------------------
package lambda2;

@FunctionalInterface  // 함수형 인터페이스
public interface FunctionalInter3 {
	int getMul(int num1, int num2);  // 추상메소드 1개 선언
}
================================================================================================================
package lambda2;

public class FunctionMain {
	public static void main(String[] args) {
		FunctionalInter4 fi4 = new FunctionalInter4() {  // 익명 클래스로 추상 메소드 구현

			@Override  // 인터페이스의 메소드 오버라이딩
			public String combineString(String msg1, String msg2) {  // 추상 메소드와 선언부 일치시키기
				return msg1 + msg2;  // 문자열을 이어붙여서 반환
			}
			
		};
		
		System.out.println("FunctionalInter4 익명 클래스 : " + fi4.combineString("안녕", "하세요"));  // 익명 클래스에서 구현한 메소드 호출
		
		FunctionalInter4 fi41 = (msg1, msg2) -> msg1 + msg2;  // 익명 메소드 람다식으로 객체 선언
		System.out.println("FunctionalInter4 익명 메소드 : " + fi41.combineString("안녕", "하세요2"));  // 람다식으로 구현한 메소드 호출
		
	}
}
--------------------------------------------------------------------------------------------------------------
package lambda2;

@FunctionalInterface  // 함수형 인터페이스
public interface FunctionalInter4 {
	String combineString(String msg1, String msg2);
	// 문자열 2개를 매개변수로 받는 추상메소드 1개 선언
}
========================================================================================================
package task;

public class Main {
	public static void main(String[] args) {
		// 반환받는 것이 값이기 때문에 출력 메소드를 통해 결과 출력
		// calculator 메소드 안에 인터페이스의 메소드가 구현되어 있기 때문에 동시 호출 가능
		System.out.println(calculator(true).getInt(3, 6));
		System.out.println(calculator(false).getInt(4, 9));
	}
	
	// 논리형 매개변수를 받아 인터페이스의 메소드를 구현하여 출력하는 메소드
	static MultipleInter calculator(boolean isTrue) {  // true면 값을 곱해주고 false면 0을 반환
		if(isTrue) {  // true가 들어온다면
			MultipleInter mi1 = (num1, num2) -> num1 * num2;  // 람다식로 메소드 구현 두 수를 곱해 반환
			return mi1;  // 반환받은 값을 메인 메소드로 반환한다
		} else {  // flase가 들어왔다면
			MultipleInter mi1 = (num1, num2) -> 0;  // 람다식으로 메소드 구현 0 반환
			return mi1;  // 반환받은 값을 메인 메소드로 반환한다
		}
	}
}
----------------------------------------------------------------------------------------------------------
package task;

@FunctionalInterface  // 함수형 인터페이스
public interface MultipleInter {
	int getInt(int num1, int num2);  // 추상 메소드 선언
}
=============================================================================================================
package task;

public class Main2 {
	public static void main(String[] args) {

		System.out.println("F를 입력 : " + subPoint("F").getMsg("ABCDEFG", "가나다"));
		// 앞에서부터 끊어서 뒤쪽만 출력
		System.out.println("B를 입력 : " + subPoint("B").getMsg("ABCDEFG", "가나다"));
		// 뒤에서부터 끊어서 앞쪽만 출력

	}

	// 문자열을 받아 앞에서 끊을지 뒤에서 끊을지 정하는 메소드
	static SubInter subPoint(String word) {
		if (word.equals("F")) {  // F가 들어왔다면
			SubInter si = (msg1, msg2) -> {  // 람다식 구현부 객체 선언
				String result = "";  // 결과를 저장할 문자열 변수 선언
				// 두 번째 문자열의 길이만큼 앞에서 잘라내고 뒤쪽만 출력하기 위한 반복문
				for (int i = msg2.length(); i < msg1.length(); i++) {
					result += msg1.charAt(i);  // 결과변수에 이어붙여 저장
				}
				return result;  // 결과 반환
			};
			return si;  // 반환받은 결과를 메인 메소드로 반환
		} else if (word.equals("B")) {  // B가 들어왔다면
			SubInter si = (msg1, msg2) -> {  // 람다식 구현부 객체 선언
				String result = "";  // 결과를 저장할 문자열 변수 선언
				// 앞쪽부터 출력하고 2번째 문자열의 길이만큼 빼서 출력하기 위한 반복문
				for (int i = 0; i < (msg1.length() - msg2.length()); i++) {
					result += msg1.charAt(i);  // 결과 변수에 문자열을 이어붙여 저장
				}
				return result;  // 결과 반환
			};
			return si;  // 반환받은 결과를 메인메소드로 반환한다
		}
		// F도 B도 입력받지 못 했을 때
		SubInter si = (msg1, msg2) -> "잘못 입력함";  // 람다식 결과 저장 
		return si;  // 결과 반환
	}
}
-----------------------------------------------------------------------------------------------------------------
package task;

@FunctionalInterface  // 함수형 인터페이스
public interface SubInter {
	String getMsg(String msg1, String msg2);  // 추상 메소드 선언
}
