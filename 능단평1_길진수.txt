package ex01_길진수;

import java.util.Scanner;

public class InputNumber {
	public static void main(String[] args) {

		// 입력 메소드 import
		// 각각의 변수와 최대 최소값, 평균을 저장할 변수선언
		// 최대값과 최소값 찾기
		// 각각의 수를 더해 평군을 구하기
		// 결과 출력

		Scanner sc = new Scanner(System.in);  // 입력 메소드 import

		int num1, num2, num3, max, min;
		// 입력받은 수를 저장할 변수 3개, 최대값 최소값을 저장할 변수 하나씩 선언
		double avg;  // 평균을 저장할 변수 선언

		System.out.println("3개의 정수를 띄어쓰기를 통해 입력하세요");  // 사용자에게 입력 요구
		num1 = sc.nextInt();  // 1번째 수 저장
		num2 = sc.nextInt();  // 2번째 수 저장
		num3 = sc.nextInt();  // 3번째 수 저장

		// 최대값 구하기
		if (num1 > num2) {  // 1번째 수가 2번째 수보다 크다면
			max = num1;  // 최대값에 1번째 수 저장
			if (num3 > max) {  // 3번째 수가 최대값에 저장된 1번째 수보다 크다면
			max = num3;  // 최대값에 3번째 수 저장
			}
		} else {  // 처음에 1번째 숫자보다 2번째 숫자가 컸다면
			max = num2;  // 최대값에 2번째 숫자 저장
			if (num3 > max) {  // 최대값에 저장된 2번째 숫자보다 3번째 숫자가 크다면
				max = num3;  // 최대값에 3번째 숫자 저장
			}
		}
		
		// 최소값 구하기
		if(num1 < num2) {  // 1번째 숫자가 2번쨰 숫자보다 작다면
			min = num1;  // 최소값에 1번째 숫자 저장
			if(num3 < min) {  // 최소값에 저장된 1번째 숫자보다 3번째 숫자가 작다면
				min = num3;  // 최소값에 3번째 숫자 저장
			}
		} else {  // 처음에 2번째 숫자가 1번째 숫자보다 작았다면
			min = num2;  // 최소값에 2번째 숫자 저장
			if(num3 < min) {  // 최소값에 저장된 2번째 숫자보다 3번째 숫자가 작다면
				min = num3;  // 최소값에 3번째 숫자 저장
			}
		}
		
		avg = (num1 + num2 + num3) / 3d;  // 입력받은 세 숫자의 합을 3으로 나누고 실수형으로 바꿔서 평균 변수에 저장
		
		System.out.println("최소값 : " + min + ", 최대값 : " + max);  // 최대값과 최소값 출력
		System.out.printf("평균 : %.3f", avg);  // 평균을 소수점 3자리까지 출력
		
		
		sc.nextLine();  // 버퍼 비우기
		sc.close();  // 자원 닫기
	}
}
===============================================================================================================
package ex02_길진수;

public class Print {
	public static void main(String[] args) {
		
		// 15부터 30을 배열에 담기
		// 짝수들의 합을 저장할 변수 선언
		// while문 제어할 논리형 변수 선언
		// while문을 사용하여 30까지 수를 다 보면 while문 종료
		
		
		int[] ar = new int[16];  // 15부터 30이 들어갈 정수형 배열 선언
		int sum = 0;  // 짝수들의 합을 저장할 변수 선언
		
		for(int i=0; i<ar.length; i++) {  // 배열의 길이만큼 반복
			ar[i] = i+15;  // 배열에 15부터 순차적으로 수를 담는다
		}
		
		boolean isTrue = true;  // 반복문을 통제할 논리형 변수 선언
		while(isTrue) {  // 일단 실행
			for(int i=0; i<ar.length; i++) {  // 배열의 길이만큼 반복한다
				if(ar[i]%2 == 0) {  // 배열에 저장된 값이 짝수라면
					sum += ar[i];  // 해당 인덱스에 저장된 값을 총합 변수에 더해서 저장
				}
				if(i == 15) {  // for문이 끝까지 실행됐다면
					isTrue = false;  // 반복문 탈출
				}
			}
		}
		
		System.out.println("15부터 30까지 짝수들의 합 : " + sum);  // 총합 결과 출력
	}
}
========================================================================================================
package ex03_길진수;

public class Stars1 {
	public static void main(String[] args) {
		
		for(int i=0; i<3; i++) {  // 3행을 만든다
			for(int j=3; j>i; j--) {  // *의 위치를 조정하기 위해 공백을 순차적으로 줄인다
				System.out.print(" ");  // 공백 출력하고 줄은 바꾸지 않는다
			}
			for(int j=0; j<i+1; j++) {  // 해당 행의 번호만큼 *을 출력한다
				System.out.print("* ");  // * 출력하고 줄은 바꾸지 않는다
			}
			System.out.println();  // 줄 바꾸기
		}
	}
}
==========================================================================================================
package ex03_길진수;

import java.util.Scanner;

public class Stars2 {
	public static void main(String[] args) {
		
		Scanner sc = new Scanner(System.in);  // 입력 메소드 import
		
		System.out.print("출력하고 싶은 행 입력 : ");  // 사용자에게 입력값 요구
		int num = sc.nextInt();  // 변수를 선언해 사용자가 입력한 값을 저장
		
		for(int i=0; i<num; i++) {  // 사용자가 입력한 만큼 행을 만든다
			for(int j=0; j<=i; j++) {  // 행의 해당하는 수 만큼 *을 출력한다
				System.out.print("*");  // *을 출력하고 줄은 바꾸지 않는다
			}
			System.out.println();  // 줄 바꾸기
		}
	}
}
===========================================================================================================
package ex04_길진수;

import java.util.Scanner;

public class Main {
	public static void main(String[] args) {
		
		// 입력메소드 import
		// 객체 생성
		// 입력받은 이름과 각 점수로 객체 생성
		// 입력은 0~100
		// 입력 범위 벗어나면 메시지 출력하고 프로그램 종료
		// 각 학생의 총점과 평균 출력
		
		Scanner sc = new Scanner(System.in);  // 입력 메소드 import
		

		System.out.println("학생1의 이름과 java 점수, dbms점수, html점수를 띄어쓰기로 구분하여 입력하세요");
		// 1번 학생에게 입력값 요구
		Student st1 = new Student(sc.next(), sc.nextInt(), sc.nextInt(), sc.nextInt());
		// 입력받은 이름과 점수들을 인수로 넣어서 객체 생성
		
		System.out.println("학생2의 이름과 java 점수, dbms점수, html점수를 띄어쓰기로 구분하여 입력하세요");
		// 2번 학생에게 입력값 요구
		Student st2 = new Student(sc.next(), sc.nextInt(), sc.nextInt(), sc.nextInt());
		// 입력받은 이름과 점수들을 인수로 넣어서 객체 생성

		
		System.out.println(st1.getName() + "의 총점은 : " + st1.getTotalScore() + "이고 평균은 : " + st1.getAverageScore() + "입니다");
		// 이름을 반환하는 메소드, 총점 반환 메소드, 평균 반환 메소드를 사용하여 결과 출력
		System.out.println(st2.getName() + "의 총점은 : " + st2.getTotalScore() + "이고 평균은 : " + st2.getAverageScore() + "입니다");
		// 이름을 반환하는 메소드, 총점 반환 메소드, 평균 반환 메소드를 사용하여 결과 출력
	}
}
-----------------------------------------------------------------------------------------------------
package ex04_길진수;

public class Person {
	
	// 필드 선언
	// 생성자 만들기 매개변수 1개
	// 메소드 선언 리턴값 String
	
	private String name;  // private 필드 선언
	
	Person(String name){  // 문자열 이름을 매개변수로 받는 생성자 선언
		this.name = name;  // 이름 초기화
	}
	
	// 이름을 열람할 수 있는 매소드 다른 클래스에선 이 메소드를 통해서만 이름을 알 수 있다
	String getName() {
		return this.name;  // 해당 객체의 이름 반환
	}
}
-------------------------------------------------------------------------------------------------------
package ex04_길진수;

public class Student extends Person{
	
	// 필드 선언 정수형 3개
	// 생성자 1개 점수 초기화
	// 메소드 정수형 반환
	// 메소드 실수형 반환
	
	private int javaScore;  // java 점수 필드 선언
	private int dbmsScore;  // dbms 점수 필드 선언
	private int htmlScore;  // html 점수 필드 선언
	
	// 학생의 이름과 과목별 점수를 매개변수로 받는 생성자 선언
	public Student(String name, int javaScore, int dbmsScore, int htmlScore) {
		super(name);  // 이름은 부모의 생성자로 보내서 겹치는 코드를 줄인다
		this.javaScore = javaScore;  // java 점수 필드 초기화
		this.dbmsScore = dbmsScore;  // dbms 점수 필드 초기화
		this.htmlScore = htmlScore;  // html 점수 필드 초기화
	}
	
	// 총점을 정수형으로 반환하는 메소드 선언
	int getTotalScore() {
		return this.javaScore + this.dbmsScore + this.htmlScore;
		// 해당 객체의 점수들의 총합을 반환한다
	}
	
	// 평균을 실수형으로 반환하는 메소드
	double getAverageScore() {
		return (this.getTotalScore()) / 2d;
		// 해당 객체의 평균 점수를 총점 메소드로 받아온 값에서 2을 나누어 실수형으로 반환
	}
}
===================================================================================================
package ex05_길진수;

public class Main {
	public static void main(String[] args) {
		
		// 객체를 선언하고 배열의 크기를 보내 초기화
		// 각 객체 생성
		// 행동 일괄 출력
		
		Zoo z = new Zoo(3);  // 객체를 생성하고 배열의 크기를 3으로 초기화 한다
		z.addAnimal(new Pet("얼룩말"));  // 업캐스팅 배열에 동물을 넣는 메소드 호출
		z.addAnimal(new Pet("사자"));  // 업캐스팅 배열에 동물을 넣는 메소드 호출
		z.addAnimal(new Pet("기린"));  // 업캐스팅 배열에 동물을 넣는 메소드 호출
		z.addAnimal(new Pet("고릴라"));  // 업캐스팅 배열에 동물을 넣는 메소드 호출
		
		z.printAllAction();  // 행동을 일괄 출력
		

	}
}
--------------------------------------------------------------------------------------------------
package ex05_길진수;

public abstract class Animal {
	
	// 필드 선언
	// 생성자 이름 초기화
	// 일반 메소드 이름 반환
	// 추상 메소드 행동 출력
	
	protected String name;  // protected로 필드 선언
	// 같은 클래스, 같은 패키지, 다른 페키지의 상속관계만 호출 가능
	
	public Animal(String name) {  // 동믈의 이름을 매개변수로 하는 생성자 선언
		super();  // Object 생성자
		this.name = name;  // 이름을 받아 필드 초기화
	}
	
	String getName() {  // 이름을 반환해주는 메소드 선언
		return this.name;  // 이름 반환
	}
	
	abstract void performAction();  // 동물의 행동을 출력하는 추상 메소드 선언
}
--------------------------------------------------------------------------------------------------
package ex05_길진수;

public class Pet extends Animal{
	
	// 이름 받아 초기화
	// 행동 출력 메소드 3개
	// 행동 오버라이딩 하여 출력
	
	public Pet(String name){  // 동믈의 이름을 매개변수로 하는 생성자 선언
		super(name);  // 겹치는 코드를 줄이기 위해 부모의 생성자로 보낸다
	}
	
	void play() {  // 놀기 메소드 선언
		System.out.println(this.name + "이(가) 놀고있습니다.");  // 객체가 놀고있음
		// 이름의 접근제한자가 protected => 같은 페키지이면서 상속받았기 때문에 호출 가능
	}
	
	void eat() {  // 먹기 메소드 선언
		System.out.println(this.name + "이(가) 밥을 먹습니다.");  // 객체가 식사중
	}
	
	void sleep() {  // 잠자기 메소드 선언
		System.out.println(this.name + "이(가) 잠을 잡니다.");  // 객체자 잠을 자고있음
	}

	@Override  // 부모 클래스의 메소드를 오버라이딩 하였음
	void performAction() {  // 행동을 일괄 출력해주는 메소드
		this.play();  // 놀기 메소드 호출
		this.eat();  // 먹기 메소드 호출
		this.sleep();  // 잠자기 매소드 호출
	}
	
}
-----------------------------------------------------------------------------------------------
package ex05_길진수;

public class Zoo {

	// 필드 선언 객체 배열
	// 필드 동물의 수 저장
	// 생성자 배열 크기를 받아 초기화
	// 메소드 동물 각 인덱스에 넣기
	// 메소드 행동 출력

	Animal[] animals;  // 배열 필드 선언
	int animalCount;  // 동물의 수를 새어줄 정수형 필드 선언

	// 매개변수를 받아 배열의 크기를 초기화 하는 것을 빼놓고 하고있었습니다
	public Zoo(int num) {  // 배열의 크기를 초기화 해줄 생성자 선언
		animals = new Animal[num];  // 배열의 크기를 초기화한다
	}

	// 배열에 업캐스팅을 해서 값을 넣어야 하는 것을 생각하지 못했습니다
	void addAnimal(Animal a) {  // 동물을 배열에 집어넣기 
		// Cat클래스에서 Animal클래스로 업캐스팅되어 들어온다 -> 자동 형변환
		if(animalCount == 3) {  // 변수가 0부터 시작하기 때문에 3이 되면 멈춘다
			System.out.println("더 이상 동물을 추가할 수 없습니다");  // 경고 메시지 출력
			return;  // 강제종료
		}
		if (animalCount <= animals.length) {  // 배열에 남은 자리가 있는지 확인
			animals[animalCount] = a;  // 배열에 객체를 저장한다
			System.out.println(animals[animalCount].name);  // 배열에 동물이 잘 들어갔는지 확인
			animalCount++;  // 동물의 수를 카운트 중복 인덱스 방지, 3마리 이상 들어오는 것을 방지한다
		}
	}

	void printAllAction() {  // 모든 객체 행동 일괄 출력
		for (Animal ani : animals) {  // 배열에 저장된 객체들을 순차적으로 내보낸다
			ani.performAction();  // 해당 객체 행동 일괄 출력
		}
	}
}
